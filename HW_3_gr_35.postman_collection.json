{
	"info": {
		"_postman_id": "d01c7352-7a3d-42b8-bdac-fb35c8a656d7",
		"name": "HW_3_gr_35",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16645036"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_response = pm.response.json(); // Cпарсил response\r",
							"var parsed_token = parsed_response.token // Cоздал переменную с токеном из response\r",
							"\r",
							"pm.environment.set(\"token\", parsed_token); // Создал переменную окружения {{token}}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "artem",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5008/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"json_schema = {\r",
							"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The person Schema\",\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_age Schema\",\r",
							"                    \"examples\": [\r",
							"                        25\r",
							"                    ]\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The u_name Schema\",\r",
							"                    \"items\": {\r",
							"                        \"anyOf\": [{\r",
							"                            \"type\": \"string\",\r",
							"                            \"default\": \"\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"examples\": [\r",
							"                                \"Artiom\"\r",
							"                            ]\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \"examples\": [\r",
							"                                500,\r",
							"                                25\r",
							"                            ]\r",
							"                        }]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\"Artiom\",\r",
							"                            500,\r",
							"                            25\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"examples\": [\r",
							"                        2000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"u_age\": 25,\r",
							"                \"u_name\": [\r",
							"                    \"Artiom\",\r",
							"                    500,\r",
							"                    25\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 2000\r",
							"            }]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The qa_salary_after_12_months Schema\",\r",
							"            \"examples\": [\r",
							"                1450.0\r",
							"            ]\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The qa_salary_after_6_months Schema\",\r",
							"            \"examples\": [\r",
							"                1000\r",
							"            ]\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The start_qa_salary Schema\",\r",
							"            \"examples\": [\r",
							"                500\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"person\": {\r",
							"            \"u_age\": 25,\r",
							"            \"u_name\": [\r",
							"                \"Artiom\",\r",
							"                500,\r",
							"                25\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 2000\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": 1450.0,\r",
							"        \"qa_salary_after_6_months\": 1000,\r",
							"        \"start_qa_salary\": 500\r",
							"    }]\r",
							"} // Cоздал переменную json_schema со схемой json\r",
							"\r",
							"parsed_resonse = pm.response.json(); // Спарсил response body в json.\r",
							"parsed_request = JSON.parse(pm.request.body.raw); // Спарсил request.\r",
							"request_salary = parsed_request.salary // Создал переменную с salary из request\r",
							"qa_salary_after_6_months = parsed_resonse.qa_salary_after_6_months // Создал переменнную с qa_salary_after_6_months из response\r",
							"qa_salary_after_12_months = parsed_resonse.qa_salary_after_12_months // Создал переменнную с qa_salary_after_12_months из response\r",
							"start_qa_salary = parsed_resonse.start_qa_salary // Создал переменнную с start_qa_salary из response\r",
							"u_salary_1_5_year = parsed_resonse.person.u_salary_1_5_year // Создал переменнную с u_salary_1_5_year из response\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 1) Статус код 200\r",
							"\r",
							"pm.test('Response structure checking', function() {\r",
							"  pm.expect(tv4.validate(parsed_resonse, json_schema)).to.be.true;\r",
							"}); // 2) Проверка структуры json в ответе.\r",
							"\r",
							"pm.test(\"start_qa_salary matches request_salary\", function () {\r",
							"    pm.expect(start_qa_salary).to.eql(request_salary);\r",
							"}); // 3.  В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months matches request_salary*2\", function () {\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(request_salary*2);\r",
							"}); // 3.  В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months matches request_salary*2.9\", function () {\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(request_salary*2.9);\r",
							"}); // 3.  В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"u_salary_1_5_year matches request_salary*4\", function () {\r",
							"    pm.expect(u_salary_1_5_year).to.eql(request_salary*4);\r",
							"}); // 3.  В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.environment.set(\"u_salary_1_5_year\", u_salary_1_5_year); // 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user. Даный запрос создается в EP_/get_test_user."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 25,\r\n    \"salary\": 500,\r\n    \"name\": \"Artiom\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5008/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Artiom",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_response = pm.response.json(); // Спарсил response body в json\r",
							"var parsed_request = request.data; // Спарсил request\r",
							"var request_salary = +parsed_request.salary // Создал переменную с salary из request\r",
							"var salary_0 = parsed_response.salary[0]; // Cоздал переменную с salary_0 из response\r",
							"var salary_1 = +parsed_response.salary[1]; // Cоздал переменную с salary_1 из response\r",
							"var salary_2 = +parsed_response.salary[2]; // Cоздал переменную с salary_2 из response\r",
							"\r",
							"json_schema = {\r",
							"    // \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                25\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Artiom\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"default\": [],\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"items\": {\r",
							"                \"anyOf\": [{\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"examples\": [\r",
							"                        500\r",
							"                    ]\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"A Schema\",\r",
							"                    \"examples\": [\r",
							"                        \"1000\",\r",
							"                        \"1500\"\r",
							"                    ]\r",
							"                }]\r",
							"            },\r",
							"            \"examples\": [\r",
							"                [500,\r",
							"                    \"1000\",\r",
							"                    \"1500\"\r",
							"                ]\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 25,\r",
							"        \"name\": \"Artiom\",\r",
							"        \"salary\": [\r",
							"            500,\r",
							"            \"1000\",\r",
							"            \"1500\"\r",
							"        ]\r",
							"    }]\r",
							"} // Создал json схему response\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 1) Статус код 200\r",
							"\r",
							"pm.test(\"JSON schema check\", function () {\r",
							"    pm.response.to.have.jsonSchema(json_schema);\r",
							"}); // 2) Проверка структуры json в ответе.\r",
							"\r",
							"pm.test(\"salary_0 matches request_salary\", function () {\r",
							"    pm.expect(salary_0).to.eql(request_salary);\r",
							"}); // 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"salary_1 matches request_salary*2\", function () {\r",
							"    pm.expect(salary_1).to.eql(request_salary*2);\r",
							"}); // 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"salary_2 matches request_salary*3\", function () {\r",
							"    pm.expect(salary_2).to.eql(request_salary*3);\r",
							"}); // 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var assert = require('assert');\r",
							"pm.test(\"salary_2 > salary_1 and salary_0\", function () {\r",
							"    assert(salary_2 > salary_1 && salary_2 > salary_0);\r",
							"}); // 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Artiom",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5008/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"parsed_response = pm.response.json(); // Спарсил response\r",
							"parsed_request = request.data // Спарсил request\r",
							"request_weight = parsed_request.weight // Создал переменную с weight из request\r",
							"daily_food = parsed_response.daily_food // Cоздал переменную с daily_food из response\r",
							"daily_sleep = parsed_response.daily_sleep // Cоздал переменную с daily_sleep из response\r",
							"\r",
							"json_schema = {\r",
							"    // \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                9\r",
							"            ]\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_food Schema\",\r",
							"            \"examples\": [\r",
							"                0.048\r",
							"            ]\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_sleep Schema\",\r",
							"            \"examples\": [\r",
							"                10.0\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Pusia\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": 9,\r",
							"        \"daily_food\": 0.048,\r",
							"        \"daily_sleep\": 10.0,\r",
							"        \"name\": \"Pusia\"\r",
							"    }]\r",
							"} // Создал json схему response\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 1) Статус код 200\r",
							"\r",
							"pm.test(\"JSON schema check\", function () {\r",
							"    pm.response.to.have.jsonSchema(json_schema);\r",
							"}); // 2) Проверка структуры json в ответе.\r",
							"\r",
							"pm.test(\"daily_food = request_weight*0.012\", function () {\r",
							"    pm.expect(daily_food).to.eql(request_weight*0.012);\r",
							"}); // 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"daily_sleep = request_weight*2.5\", function () {\r",
							"    pm.expect(daily_sleep).to.eql(request_weight*2.5);\r",
							"}); // 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "9",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "4",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pusia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5008/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"test_pet_info"
					],
					"query": [
						{
							"key": "age",
							"value": "8",
							"disabled": true
						},
						{
							"key": "weight",
							"value": "4",
							"disabled": true
						},
						{
							"key": "name",
							"value": "P",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"name\", \"Artiom\"); // Создал переменную окружения name\r",
							"parsed_request = request.data; // Спарсил request\r",
							"parsed_response = pm.response.json(); // Спарсил response\r",
							"response_name = parsed_response.name; // Создал переменную с name из request\r",
							"environment_name = pm.environment.get(\"name\"); // Создал переменную с name из environment\r",
							"request_age = parsed_request.age // Создал переменную с age из request\r",
							"response_age = parsed_response.age // Создал переменную с age из response\r",
							"\r",
							"json_schema = {\r",
							"    // \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                \"25\"\r",
							"            ]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The family Schema\",\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The children Schema\",\r",
							"                    \"items\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"title\": \"A Schema\",\r",
							"                        \"items\": {\r",
							"                            \"anyOf\": [{\r",
							"                                \"type\": \"string\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    \"Alex\",\r",
							"                                    \"Kate\"\r",
							"                                ]\r",
							"                            },\r",
							"                            {\r",
							"                                \"type\": \"integer\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    24,\r",
							"                                    12\r",
							"                                ]\r",
							"                            }]\r",
							"                        },\r",
							"                        \"examples\": [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"examples\": [\r",
							"                        2000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"children\": [\r",
							"                    [\"Alex\",\r",
							"                        24\r",
							"                    ],\r",
							"                    [\"Kate\",\r",
							"                        12\r",
							"                    ]\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 2000\r",
							"            }]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Artiom\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"examples\": [\r",
							"                500\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": \"25\",\r",
							"        \"family\": {\r",
							"            \"children\": [\r",
							"                [\"Alex\",\r",
							"                    24\r",
							"                ],\r",
							"                [\"Kate\",\r",
							"                    12\r",
							"                ]\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 2000\r",
							"        },\r",
							"        \"name\": \"Artiom\",\r",
							"        \"salary\": 500\r",
							"    }]\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 1) Статус код 200\r",
							"\r",
							"pm.test(\"Validation of jsonSchema\", function () {\r",
							"    pm.response.to.have.jsonSchema(json_schema);\r",
							"}); // 2) Проверка структуры json в ответе.\r",
							"\r",
							"pm.test(\"response_name matches environment_name\", function () {\r",
							"    pm.expect(response_name).to.eql(environment_name);\r",
							"}); // 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"\r",
							"pm.test(\"response_age matches request_age\", function () {\r",
							"    pm.expect(response_age).to.eql(request_age);\r",
							"}); // 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Artiom",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5008/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5008",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"parsed_response = pm.response.json() // Спарсил response\r",
							"response_length = parsed_response.length-1 // Создал переменную с длинной массива\r",
							"\r",
							"function getRandomInt(max) {\r",
							"  return Math.floor(Math.random() * max);\r",
							"} // Создал функцию для определения рандомного числа\r",
							"\r",
							"random_object = parsed_response[getRandomInt(response_length)] // Создал переменную с выбором рандомного объекта\r",
							"random_curr_code = random_object.Cur_ID // Создал переменную с кодом рандомного объекта\r",
							"pm.environment.set(\"curr_code\", random_curr_code); // Создал переменную окружения с кодом рандомного объекта\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"json_schema = {\r",
							"    // \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Cur_Abbreviation Schema\",\r",
							"            \"examples\": [\r",
							"                \"GBP\"\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The Cur_ID Schema\",\r",
							"            \"examples\": [\r",
							"                37\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Cur_Name Schema\",\r",
							"            \"examples\": [\r",
							"                \"British pounds sterling\"\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The Cur_OfficialRate Schema\",\r",
							"            \"examples\": [\r",
							"                60.19188531031874\r",
							"            ]\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The Cur_Scale Schema\",\r",
							"            \"examples\": [\r",
							"                52\r",
							"            ]\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Date Schema\",\r",
							"            \"examples\": [\r",
							"                \"2023-07-21\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"Cur_Abbreviation\": \"GBP\",\r",
							"        \"Cur_ID\": 37,\r",
							"        \"Cur_Name\": \"British pounds sterling\",\r",
							"        \"Cur_OfficialRate\": 60.19188531031874,\r",
							"        \"Cur_Scale\": 52,\r",
							"        \"Date\": \"2023-07-21\"\r",
							"    }]\r",
							"} // Cоздал переменную json_schema с json схемой\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 1) Статус код 200\r",
							"\r",
							"pm.test(\"Validation of jsonSchema\", function () {\r",
							"    pm.response.to.have.jsonSchema(json_schema);\r",
							"}); // 2) Проверка структуры json в ответе."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "Star task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"parsed_response = pm.response.json() // 1) получить список валют\r",
							"length_response = parsed_response.length - 1 // Cоздал переменную с длинной массива (количество объектов)\r",
							"token_var = pm.environment.get(\"token\"); // Создал переменную с переменной из окружения\r",
							"\r",
							"for (let i = 0; i <= length_response; i++){ // 2) итерировать список валют\r",
							"    let postRequest = {\r",
							"    url:  'http://54.157.99.22:80/curr_byn', \r",
							"    method: 'POST',\r",
							"    header: {\"Content-Type\": \"application/json\"},\r",
							"    body:{\r",
							"        mode: \"formdata\",\r",
							"        formdata: [\r",
							"            {key: 'auth_token', value: token_var},\r",
							"            {key: 'curr_code', value: parsed_response[i].Cur_ID.toString()}\r",
							"        ]\r",
							"        }\r",
							"    }        \r",
							"\r",
							"    pm.sendRequest(postRequest, function (err, response) {\r",
							"        //console.log(response.json().Cur_Abbreviation, '=', response.json().Cur_OfficialRate) // 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"        if (response.code == 500) {\r",
							"            console.log(err) // 4) если возвращается 500 код, переходим к следующей итреации\r",
							"        } else if (response.code == 200) {\r",
							"            if (pm.expect(response.json()).to.have.property('Cur_OfficialRate')) { // 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"                console.log(response.json()) // 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"            }\r",
							"        // 7) переходим к следующей итерации\r",
							"        } \r",
							"    });\r",
							"\r",
							"} \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}